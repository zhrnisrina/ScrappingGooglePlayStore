---
title: "Project Scraping"
format: 
  html:
    embed-resources: true
    toc: true
    self-contained: true
---

Data

```{r}
library(jsonlite)
df <- fromJSON("E:\\S2 IPB\\SEMESTER 2\\Manajemen Data Statistika\\UAS\\google_play_scraped_20x68.json", flatten = T)
str(df)
```

```{r}
names(df)
```

Data clean

```{r}
library(dplyr)
library(stringr)
apps_df_cleaned <- df %>%
  mutate(
    # Membersihkan dan mengonversi jumlah unduhan
    downloads_numeric = as.numeric(str_remove_all(number_of_downloads, "[+,]")),

    # Konversi harga: "Free" jadi 0, lainnya jadi numeric
    price = ifelse(price == "Free", 0, as.numeric(price)),

    # Konversi rating dan jumlah ulasan ke numeric
    rating = as.numeric(rating),
    number_of_reviews = as.numeric(number_of_reviews),

    # Kategorisasi monetisasi
    free_or_paid = ifelse(price > 0, "Paid", "Free")
  )
```

```{r}
head(apps_df_cleaned)
```

## Aggregation

### Top 10 Categories berdasarkan jumlah aplikasi

```{r}
library(ggplot2)
top_categories_by_app_count <- apps_df_cleaned %>%
  count(category, sort = TRUE) %>%
  slice_head(n = 10)

ggplot(top_categories_by_app_count, aes(x = reorder(category, n), y = n)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(title = "Top 10 Kategori Berdasarkan Jumlah Aplikasi", x = "Kategori", y = "Jumlah Aplikasi")
```

### Rata-rata Download vs Rating per Kategori

```{r}
downloads_vs_rating <- apps_df_cleaned %>%
  group_by(category) %>%
  summarise(
    avg_rating = mean(rating, na.rm = TRUE),
    avg_downloads = mean(downloads_numeric, na.rm = TRUE)
  )

ggplot(downloads_vs_rating, aes(x = avg_downloads / 1e6, y = avg_rating, label = category)) +
  geom_point(color = "darkgreen") +
  geom_text(check_overlap = TRUE, size = 3, vjust = 1.5) +
  labs(title = "Rata-rata Download vs Rating per Kategori", x = "Rata-rata Download (juta)", y = "Rata-rata Rating")
```

### Developer dengan Total Download Terbesar (Top 10)

```{r}
top_developers_download <- apps_df_cleaned %>%
  group_by(developer) %>%
  summarise(total_downloads = sum(downloads_numeric, na.rm = TRUE)) %>%
  arrange(desc(total_downloads)) %>%
  slice_head(n = 10)

ggplot(top_developers_download, aes(x = reorder(developer, total_downloads), y = total_downloads / 1e6)) +
  geom_col(fill = "darkorange") +
  coord_flip() +
  labs(title = "Top 10 Developer dengan Total Download Terbesar", x = "Developer", y = "Total Download (juta)")
```

### Aplikasi dengan Download Tinggi tapi Rating Rendah (Risiko UX)

```{r}
high_download_low_rating <- apps_df_cleaned %>%
  filter(downloads_numeric > 1e7, rating < 3.5) %>%
  arrange(desc(downloads_numeric)) %>%
  select(app_name, rating, downloads_numeric)

head(high_download_low_rating, 10)
```

### Korelasi Rating dan Download

```{r}
cor_rating_download <- cor(apps_df_cleaned$rating, apps_df_cleaned$downloads_numeric, use = "complete.obs")

ggplot(apps_df_cleaned, aes(x = downloads_numeric, y = rating)) +
  geom_point(alpha = 0.4) +
  scale_x_log10() +
  geom_smooth(method = "lm") +
  labs(title = paste("Korelasi Rating vs Download: r =", round(cor_rating_download, 2)),
       x = "Download (log scale)", y = "Rating")
```

### Aplikasi dengan Rating Tertinggi per Kategori

```{r}
top_rated_per_category <- apps_df_cleaned %>%
  group_by(category) %>%
  filter(!is.na(rating)) %>%
  slice_max(order_by = rating, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  select(category, app_name, rating, downloads_numeric)

top_rated_per_category
```

### Aplikasi dengan Download Tertinggi per Kategori

```{r}
most_downloaded_per_category <- apps_df_cleaned %>%
  group_by(category) %>%
  filter(!is.na(downloads_numeric)) %>%
  slice_max(order_by = downloads_numeric, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  select(category, app_name, downloads_numeric, rating)

most_downloaded_per_category
```

### Volatilitas Rating antar Aplikasi dalam Satu Kategori

```{r}
rating_variance <- apps_df_cleaned %>%
  group_by(category) %>%
  summarise(sd_rating = sd(rating, na.rm = TRUE)) %>%
  arrange(desc(sd_rating))

ggplot(rating_variance, aes(x = reorder(category, sd_rating), y = sd_rating)) +
  geom_col(fill = "tomato") +
  coord_flip() +
  labs(title = "Volatilitas Rating antar Aplikasi (SD)", x = "Kategori", y = "Standard Deviasi Rating")
```

### Konsentrasi Developer Dominan per Kategori

```{r}
dominant_developers <- apps_df_cleaned %>%
  group_by(category, developer) %>%
  summarise(app_count = n()) %>%
  arrange(desc(app_count)) %>%
  group_by(category) %>%
  slice_max(app_count, n = 1)

ggplot(dominant_developers, aes(x = reorder(category, app_count), y = app_count)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(title = "Developer Dominan di Tiap Kategori", x = "Kategori", y = "Jumlah Aplikasi")
```

### Rasio Aplikasi Berbayar per Kategori

```{r}
library(tidyr)
price_ratio <- apps_df_cleaned %>%
  group_by(category, free_or_paid) %>%
  summarise(count = n()) %>%
  pivot_wider(names_from = free_or_paid, values_from = count, values_fill = 0) %>%
  mutate(paid_ratio = Paid / (Free + Paid))

ggplot(price_ratio, aes(x = reorder(category, paid_ratio), y = paid_ratio)) +
  geom_col(fill = "purple") +
  coord_flip() +
  labs(title = "Proporsi Aplikasi Berbayar per Kategori", x = "Kategori", y = "Rasio Berbayar")
```

### Aplikasi Rating Tinggi tapi Download Rendah (Hidden Gems)

```{r}
hidden_gems <- apps_df_cleaned %>%
  filter(rating >= 4.5, downloads_numeric < 100000) %>%
  arrange(desc(rating)) %>%
  slice_head(n = 10)

ggplot(hidden_gems, aes(x = reorder(app_name, rating), y = rating)) +
  geom_col(fill = "forestgreen") +
  coord_flip() +
  labs(title = "Aplikasi 'Hidden Gems' (Rating Tinggi, Download Rendah)", x = "Aplikasi", y = "Rating")
```
